------------------------------------------------
------------------------------------------------
Results for all tests
------------------------------------------------
------------------------------------------------
unittest1.c - updateCoins tests:
TESTING updateCoins():
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A hand count test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A hand count test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A hand count test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A bonus test case passed
A hand count test case passed
All tests passed - updateCoins function!
Total asserts conducted - 6864 cases
File 'dominion.c'
Lines executed:16.34% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    68640:    8:int compare(const void* a, const void* b) {
    68640:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    68640:   11:  if (*(int*)a < *(int*)b)
    18304:   12:    return -1;
    50336:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1144:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1144:   44:  SelectStream(1);
     1144:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1144:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1144:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    12584:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   125840:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   114400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1144:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     1144:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     1144:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1144:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1144:   95:      state->supplyCount[estate] = 12;
     1144:   96:      state->supplyCount[duchy] = 12;
     1144:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1144:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1144:  102:  state->supplyCount[silver] = 40;
     1144:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    24024:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   188760:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   177320:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    11440:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     4576:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     2288:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     9152:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    11440:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   165880:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     5720:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     4576:  140:      state->deckCount[i] = 0;
    18304:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    13728:  143:	  state->deck[i][j] = estate;
    13728:  144:	  state->deckCount[i]++;
        -:  145:	}
    36608:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    32032:  148:	  state->deck[i][j] = copper;
    32032:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     5720:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     4576:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     5720:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4576:  166:      state->handCount[i] = 0;
     4576:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    32032:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    30888:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1144:  182:  state->outpostPlayed = 0;
     1144:  183:  state->phase = 0;
     1144:  184:  state->numActions = 1;
     1144:  185:  state->numBuys = 1;
     1144:  186:  state->playedCardCount = 0;
     1144:  187:  state->whoseTurn = 0;
     1144:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6864:  192:  for (it = 0; it < 5; it++){
     5720:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1144:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1144:  198:  return 0;
        -:  199:}
        -:  200:
     4576:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     4576:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     4576:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     4576:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    54912:  214:  while (state->deckCount[player] > 0) {
    45760:  215:    card = floor(Random() * state->deckCount[player]);
    45760:  216:    newDeck[newDeckPos] = state->deck[player][card];
    45760:  217:    newDeckPos++;
   143000:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    97240:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    45760:  221:    state->deckCount[player]--;
        -:  222:  }
    50336:  223:  for (i = 0; i < newDeckPos; i++) {
    45760:  224:    state->deck[player][i] = newDeck[i];
    45760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4576:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     5720:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     5720:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5720:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5720:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5720:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5720:  576:    state->deckCount[player]--;
     5720:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5720:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
    #####:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
    #####:  778:  int currentPlayer = whoseTurn(state);
    #####:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
    #####:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
    #####:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
    #####:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
    #####: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
    #####: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
    #####: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
    #####: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
    #####: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
    #####: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
    #####: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
    #####: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
    #####: 1304:  return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
    #####: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
    #####: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
    #####: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
    #####: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
     8008: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
     8008: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
    99528: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
    91520: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
    18876: 1356:	  state->coins += 1;
        -: 1357:	}
    72644: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    14300: 1360:	  state->coins += 2;
        -: 1361:	}
    58344: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    14300: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
     8008: 1369:  state->coins += bonus;
        -: 1370:
     8008: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
unittest2.c - gainCard tests:
TESTING gainCard():
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
A loop of cases passed - gain card!
All tests passed - gain card!
Total asserts conducted - 765 cases
File 'dominion.c'
Lines executed:18.65% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24300:    8:int compare(const void* a, const void* b) {
    24300:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    24300:   11:  if (*(int*)a < *(int*)b)
     6480:   12:    return -1;
    17820:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      405:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      405:   44:  SelectStream(1);
      405:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      405:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      405:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     4455:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    44550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    40500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      405:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      405:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      405:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      405:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      405:   95:      state->supplyCount[estate] = 12;
      405:   96:      state->supplyCount[duchy] = 12;
      405:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      405:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      405:  102:  state->supplyCount[silver] = 40;
      405:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     8505:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    66825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    62775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     4050:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     1620:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      810:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     3240:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     4050:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    58725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2025:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1620:  140:      state->deckCount[i] = 0;
     6480:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     4860:  143:	  state->deck[i][j] = estate;
     4860:  144:	  state->deckCount[i]++;
        -:  145:	}
    12960:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    11340:  148:	  state->deck[i][j] = copper;
    11340:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2025:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1620:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2025:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1620:  166:      state->handCount[i] = 0;
     1620:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    11340:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    10935:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      405:  182:  state->outpostPlayed = 0;
      405:  183:  state->phase = 0;
      405:  184:  state->numActions = 1;
      405:  185:  state->numBuys = 1;
      405:  186:  state->playedCardCount = 0;
      405:  187:  state->whoseTurn = 0;
      405:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     2430:  192:  for (it = 0; it < 5; it++){
     2025:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      405:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      405:  198:  return 0;
        -:  199:}
        -:  200:
     1620:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1620:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1620:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1620:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    19440:  214:  while (state->deckCount[player] > 0) {
    16200:  215:    card = floor(Random() * state->deckCount[player]);
    16200:  216:    newDeck[newDeckPos] = state->deck[player][card];
    16200:  217:    newDeckPos++;
    50625:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    34425:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    16200:  221:    state->deckCount[player]--;
        -:  222:  }
    17820:  223:  for (i = 0; i < newDeckPos; i++) {
    16200:  224:    state->deck[player][i] = newDeck[i];
    16200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1620:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      405:  320:int supplyCount(int card, struct gameState *state) {
      405:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     2025:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2025:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     2025:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2025:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2025:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2025:  576:    state->deckCount[player]--;
     2025:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2025:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
    #####:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
    #####:  778:  int currentPlayer = whoseTurn(state);
    #####:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
    #####:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
    #####:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
    #####:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
    #####: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
    #####: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
    #####: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
    #####: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
    #####: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
    #####: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
    #####: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
    #####: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
    #####: 1304:  return 0;
        -: 1305:}
        -: 1306:
      405: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
      405: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
      150: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
      255: 1322:  if (toFlag == 1)
        -: 1323:    {
       85: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       85: 1325:      state->deckCount[player]++;
        -: 1326:    }
      170: 1327:  else if (toFlag == 2)
        -: 1328:    {
       85: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       85: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
       85: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       85: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
      255: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
      255: 1341:  return 0;
        -: 1342:}
        -: 1343:
      405: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
      405: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
     2430: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
     2025: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
     1620: 1356:	  state->coins += 1;
        -: 1357:	}
      405: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
      405: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
      405: 1369:  state->coins += bonus;
        -: 1370:
      405: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
unittest3.c - fullDeckCount tests:
TESTING fullDeckCount():
fullDeckCount does not change the game state - pass for a specific player!
fullDeck count works when no cards of the requested type is present for a specific player!
fullDeck count works when a small number cards of the requested type is present for a specific player!
fullDeck count correctly accounts for cards in the discard pile for a specific player!
fullDeckCount does not change the game state - pass for a specific player!
fullDeck count works when no cards of the requested type is present for a specific player!
fullDeck count works when a small number cards of the requested type is present for a specific player!
fullDeck count correctly accounts for cards in the discard pile for a specific player!
fullDeckCount does not change the game state - pass for a specific player!
fullDeck count works when no cards of the requested type is present for a specific player!
fullDeck count works when a small number cards of the requested type is present for a specific player!
fullDeck count correctly accounts for cards in the discard pile for a specific player!
fullDeckCount does not change the game state - pass for a specific player!
fullDeck count works when no cards of the requested type is present for a specific player!
fullDeck count works when a small number cards of the requested type is present for a specific player!
fullDeck count correctly accounts for cards in the discard pile for a specific player!
All tests passed - full deck count function!
Total asserts conducted - 16 cases
File 'dominion.c'
Lines executed:17.58% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        4:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        4:   95:      state->supplyCount[estate] = 12;
        4:   96:      state->supplyCount[duchy] = 12;
        4:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        8:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       32:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       20:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       20:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       20:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
       16:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       16:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       16:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
      160:  215:    card = floor(Random() * state->deckCount[player]);
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      500:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      340:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
      108:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      108:  326:  int count = 0;
        -:  327:
     1053:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      945:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
      243:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
      135:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    51408:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    51300:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
      108:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
    #####:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
    #####:  778:  int currentPlayer = whoseTurn(state);
    #####:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
    #####:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
    #####:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
    #####:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
    #####: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
    #####: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
    #####: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
    #####: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
    #####: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
    #####: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
    #####: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
    #####: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
    #####: 1304:  return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
    #####: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
    #####: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
    #####: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
    #####: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        4: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
        4: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
       24: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
       20: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
       16: 1356:	  state->coins += 1;
        -: 1357:	}
        4: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
        4: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
        4: 1369:  state->coins += bonus;
        -: 1370:
        4: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
unittest4.c - buyCard tests: :
TESTING buyCard():
buyCard does not allow cards to be purchased when no buys are available
buyCard does not allow cards to be purchased when insufficient funds are available!
Starting empty supply pile tests!
buyCard does not allow a card to be bought from empty piles!
Starting regular purchase test!
buyCard passes the normal purchase test!
All tests passed - buyCard function!
Total checks made = 312
File 'dominion.c'
Lines executed:23.45% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1140:    8:int compare(const void* a, const void* b) {
     1140:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1140:   11:  if (*(int*)a < *(int*)b)
      304:   12:    return -1;
      836:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       19:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       19:   44:  SelectStream(1);
       19:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       19:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       19:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      209:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2090:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       19:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       19:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       19:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       19:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       19:   95:      state->supplyCount[estate] = 12;
       19:   96:      state->supplyCount[duchy] = 12;
       19:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       19:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       19:  102:  state->supplyCount[silver] = 40;
       19:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      399:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3135:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2945:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      190:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       76:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       38:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      152:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      190:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2755:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       95:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       76:  140:      state->deckCount[i] = 0;
      304:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      228:  143:	  state->deck[i][j] = estate;
      228:  144:	  state->deckCount[i]++;
        -:  145:	}
      608:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      532:  148:	  state->deck[i][j] = copper;
      532:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       95:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       76:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       95:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       76:  166:      state->handCount[i] = 0;
       76:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      532:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      513:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       19:  182:  state->outpostPlayed = 0;
       19:  183:  state->phase = 0;
       19:  184:  state->numActions = 1;
       19:  185:  state->numBuys = 1;
       19:  186:  state->playedCardCount = 0;
       19:  187:  state->whoseTurn = 0;
       19:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      114:  192:  for (it = 0; it < 5; it++){
       95:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       19:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       19:  198:  return 0;
        -:  199:}
        -:  200:
       76:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       76:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       76:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       76:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      912:  214:  while (state->deckCount[player] > 0) {
      760:  215:    card = floor(Random() * state->deckCount[player]);
      760:  216:    newDeck[newDeckPos] = state->deck[player][card];
      760:  217:    newDeckPos++;
     2375:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1615:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      760:  221:    state->deckCount[player]--;
        -:  222:  }
      836:  223:  for (i = 0; i < newDeckPos; i++) {
      760:  224:    state->deck[player][i] = newDeck[i];
      760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       76:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
       67:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       67:  280:  who = state->whoseTurn;
        -:  281:
       67:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       29:  285:    return -1;
       38:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       17:  289:    return -1;
       21:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        3:  293:    return -1;
        -:  294:  } else {
       18:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       18:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       18:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       18:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       18:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       56:  320:int supplyCount(int card, struct gameState *state) {
       56:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       95:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       95:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       95:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       95:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       95:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       95:  576:    state->deckCount[player]--;
       95:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       95:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        3:  588:      return 0;
        -:  589:    case estate:
        4:  590:      return 2;
        -:  591:    case duchy:
        4:  592:      return 5;
        -:  593:    case province:
        4:  594:      return 8;
        -:  595:    case copper:
        5:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        3:  610:      return 5;
        -:  611:    case remodel:
        3:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
    #####:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
    #####:  778:  int currentPlayer = whoseTurn(state);
    #####:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
    #####:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
    #####:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
    #####:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
    #####: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
    #####: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
    #####: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
    #####: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
    #####: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
    #####: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
    #####: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
    #####: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
    #####: 1304:  return 0;
        -: 1305:}
        -: 1306:
       18: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
       18: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
       18: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
       18: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
       18: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       18: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
       18: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
       18: 1341:  return 0;
        -: 1342:}
        -: 1343:
       19: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
       19: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
      114: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
       95: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
       76: 1356:	  state->coins += 1;
        -: 1357:	}
       19: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
       19: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
       19: 1369:  state->coins += bonus;
        -: 1370:
       19: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
cardtest1.c - newAdventurer tests:
TESTING newAdventurer() - no treasure cards test:
card count checks failed
coins check failed
The No treasure cards case failed - player 0
TESTING newAdventurer() - copper test:
card count checks failed
All copper cards case failed - player 0
TESTING newAdventurer() - silver test :
card count checks failed
All silver cards case failed - player 0
TESTING newAdventurer() - gold test :
card count checks failed
All golds cards case failed - player 0
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The One treasure card case failed! - player 0
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The Two treasure card case failed! - player 0
TESTING newAdventurer() - no treasure cards test:
card count checks failed
coins check failed
The No treasure cards case failed - player 1
TESTING newAdventurer() - copper test:
card count checks failed
All copper cards case failed - player 1
TESTING newAdventurer() - silver test :
card count checks failed
All silver cards case failed - player 1
TESTING newAdventurer() - gold test :
card count checks failed
All golds cards case failed - player 1
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The One treasure card case failed! - player 1
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The Two treasure card case failed! - player 1
TESTING newAdventurer() - no treasure cards test:
card count checks failed
coins check failed
The No treasure cards case failed - player 2
TESTING newAdventurer() - copper test:
card count checks failed
All copper cards case failed - player 2
TESTING newAdventurer() - silver test :
card count checks failed
All silver cards case failed - player 2
TESTING newAdventurer() - gold test :
card count checks failed
All golds cards case failed - player 2
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The One treasure card case failed! - player 2
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The Two treasure card case failed! - player 2
TESTING newAdventurer() - no treasure cards test:
card count checks failed
coins check failed
The No treasure cards case failed - player 3
TESTING newAdventurer() - copper test:
card count checks failed
All copper cards case failed - player 3
TESTING newAdventurer() - silver test :
card count checks failed
All silver cards case failed - player 3
TESTING newAdventurer() - gold test :
card count checks failed
All golds cards case failed - player 3
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The One treasure card case failed! - player 3
TESTING newAdventurer() - Fewer than treasure cards case :
card count checks failed
The Two treasure card case failed! - player 3
FINAL RESULT - There was at least one test failure during a test
Total checks made = 360
File 'dominion.c'
Lines executed:26.11% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1440:    8:int compare(const void* a, const void* b) {
     1440:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1440:   11:  if (*(int*)a < *(int*)b)
      384:   12:    return -1;
     1056:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       24:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       24:   44:  SelectStream(1);
       24:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       24:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       24:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      264:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2640:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       24:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       24:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       24:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       24:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       24:   95:      state->supplyCount[estate] = 12;
       24:   96:      state->supplyCount[duchy] = 12;
       24:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       24:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  102:  state->supplyCount[silver] = 40;
       24:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      504:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3960:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     3720:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       96:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       48:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      192:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      240:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3480:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      120:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       96:  140:      state->deckCount[i] = 0;
      384:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      288:  143:	  state->deck[i][j] = estate;
      288:  144:	  state->deckCount[i]++;
        -:  145:	}
      768:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      672:  148:	  state->deck[i][j] = copper;
      672:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      120:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       96:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      120:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       96:  166:      state->handCount[i] = 0;
       96:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      672:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      648:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       24:  182:  state->outpostPlayed = 0;
       24:  183:  state->phase = 0;
       24:  184:  state->numActions = 1;
       24:  185:  state->numBuys = 1;
       24:  186:  state->playedCardCount = 0;
       24:  187:  state->whoseTurn = 0;
       24:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      144:  192:  for (it = 0; it < 5; it++){
      120:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       24:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       24:  198:  return 0;
        -:  199:}
        -:  200:
      200:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      200:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      200:  209:  if (state->deckCount[player] < 1)
      104:  210:    return -1;
       96:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1152:  214:  while (state->deckCount[player] > 0) {
      960:  215:    card = floor(Random() * state->deckCount[player]);
      960:  216:    newDeck[newDeckPos] = state->deck[player][card];
      960:  217:    newDeckPos++;
     3000:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     2040:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      960:  221:    state->deckCount[player]--;
        -:  222:  }
     1056:  223:  for (i = 0; i < newDeckPos; i++) {
      960:  224:    state->deck[player][i] = newDeck[i];
      960:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       96:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       84:  346:int whoseTurn(struct gameState *state) {
       84:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
       36:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       36:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      216:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      180:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      180:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       36:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       36:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       36:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       36:  370:  state->outpostPlayed = 0;
       36:  371:  state->phase = 0;
       36:  372:  state->numActions = 1;
       36:  373:  state->coins = 0;
       36:  374:  state->numBuys = 1;
       36:  375:  state->playedCardCount = 0;
       36:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      216:  380:  for (k = 0; k < 5; k++){
      180:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       36:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       36:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      472:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      472:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       52:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       52:  538:    state->deckCount[player] = state->discardCount[player];
       52:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       52:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       52:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       52:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       52:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       52:  559:    if (deckCounter == 0)
       52:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      420:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      420:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      420:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      420:  576:    state->deckCount[player]--;
      420:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      420:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
       24:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
       24:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
       24:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
       24:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
      220:  657:      while(drawntreasure<2){
      172:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       52:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
      172:  661:	drawCard(currentPlayer, state);
      172:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
      172:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       48:  664:	  drawntreasure++;
        -:  665:	else{
      124:  666:	  temphand[z]=cardDrawn;
      124:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      124:  668:	  z++;
        -:  669:	}
        -:  670:      }
      172:  671:      while(z-1>=0){
      124:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      124:  673:	z=z-1;
        -:  674:      }
       24:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
       24:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
       24:  778:  int currentPlayer = whoseTurn(state);
       24:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
       24:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
       24:  783:  if (nextPlayer > (state->numPlayers - 1)){
        6:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
       24:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
       24:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
    #####: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
    #####: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
    #####: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
    #####: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
    #####: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
    #####: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
    #####: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
    #####: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
    #####: 1304:  return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
    #####: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
    #####: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
    #####: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
    #####: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
       60: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
       60: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
      360: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
      300: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
      216: 1356:	  state->coins += 1;
        -: 1357:	}
       84: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
       84: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
       60: 1369:  state->coins += bonus;
        -: 1370:
       60: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
cardtest2.c - newSmithy tests::
TESTING newSmithy() - nominal test case:
hand count test failed
deck count test failed
The estate case case failed - player 0
TESTING newSmithy() - copper test case:
hand count test failed
deck count test failed
The copper case case failed - player 0
TESTING newSmithy() - Fewer than three cards test case:
hand count test failed
deck count test failed
The fewer than three card case failed - player 0
FINAL RESULT - There was at least one test failure during the newSmithy tests
Total checks made = 48
File 'dominion.c'
Lines executed:20.43% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        3:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        6:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       24:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      375:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      255:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       15:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       15:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
        3:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
        3:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
        3:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
        3:  721:      discardCard(handPos, currentPlayer, state, 0);
        3:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
        3:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
        3:  778:  int currentPlayer = whoseTurn(state);
        3:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
        3:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
        3:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
        3:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
        3:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
        3: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
        3: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
        3: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
        3: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
        3: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        3: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
        3: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
        3: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
        3: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
        3: 1304:  return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
    #####: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
    #####: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
    #####: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
    #####: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        3: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
        3: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
       18: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
       15: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
       12: 1356:	  state->coins += 1;
        -: 1357:	}
        3: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
        3: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
        3: 1369:  state->coins += bonus;
        -: 1370:
        3: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
cardtest3.c - newCouncilRoom tests:
TESTING newCouncilRoom() - nominal test case / estate cards:
hand count test failed
deck count test failed
deckCount check failed for player 1
handCount check failed for player 1
deckCount check failed for player 2
handCount check failed for player 2
deckCount check failed for player 3
handCount check failed for player 3
The estate case case failed - player 0
hand count test failed
deck count test failed
deckCount check failed for player 0
handCount check failed for player 0
deckCount check failed for player 2
handCount check failed for player 2
deckCount check failed for player 3
handCount check failed for player 3
The estate case case failed - player 1
hand count test failed
deck count test failed
deckCount check failed for player 0
handCount check failed for player 0
deckCount check failed for player 1
handCount check failed for player 1
deckCount check failed for player 3
handCount check failed for player 3
The estate case case failed - player 2
hand count test failed
deck count test failed
deckCount check failed for player 0
handCount check failed for player 0
deckCount check failed for player 1
handCount check failed for player 1
deckCount check failed for player 2
handCount check failed for player 2
The estate case case failed - player 3
FINAL RESULT - There was at least one test failure during a test
Total checks made = 64
File 'dominion.c'
Lines executed:21.31% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        5:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        5:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        5:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      125:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       85:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       25:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       25:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       25:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  576:    state->deckCount[player]--;
       25:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       25:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
        4:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
        4:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
       20:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
       16:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
        4:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
       20:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
       16:  697:	  if ( i == currentPlayer )
        -:  698:	    {
        4:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
        4:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
        4:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
    #####:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
    #####:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
    #####:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
    #####:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 1);
    #####:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
        4:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
        4:  778:  int currentPlayer = whoseTurn(state);
        4:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
        4:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
        4:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
        4:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
        4:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
    #####:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
        4: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
        4: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
        4: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
        4: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
        4: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        4: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
        4: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
        4: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
        4: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
        4: 1304:  return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
    #####: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
    #####: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
    #####: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
    #####: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        1: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
        1: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
        6: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
        5: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
        4: 1356:	  state->coins += 1;
        -: 1357:	}
        1: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
        1: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
        1: 1369:  state->coins += bonus;
        -: 1370:
        1: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
cardtest4.c - newVillage tests::
TESTING newVillage() - card 0 test case:
played count test failed
The card 0 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 1 test case:
played count test failed
The card 1 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 2 test case:
played count test failed
The card 2 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 3 test case:
played count test failed
The card 3 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 4 test case:
played count test failed
The card 4 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 5 test case:
played count test failed
The card 5 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 6 test case:
played count test failed
The card 6 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 7 test case:
played count test failed
The card 7 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 8 test case:
played count test failed
The card 8 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 9 test case:
played count test failed
The card 9 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 10 test case:
played count test failed
The card 10 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 11 test case:
played count test failed
The card 11 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 12 test case:
played count test failed
The card 12 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 13 test case:
played count test failed
The card 13 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 14 test case:
played count test failed
The card 14 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 15 test case:
played count test failed
The card 15 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 16 test case:
played count test failed
The card 16 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 17 test case:
played count test failed
The card 17 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 18 test case:
played count test failed
The card 18 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 19 test case:
played count test failed
The card 19 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 20 test case:
played count test failed
The card 20 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 21 test case:
played count test failed
The card 21 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 22 test case:
played count test failed
The card 22 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 23 test case:
played count test failed
The card 23 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 24 test case:
played count test failed
The card 24 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 25 test case:
played count test failed
The card 25 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
TESTING newVillage() - card 26 test case:
played count test failed
The card 26 case failed - player 0
deckCount check passed for player 1
handCount check passed for player 1
deckCount check passed for player 2
handCount check passed for player 2
deckCount check passed for player 3
handCount check passed for player 3
FINAL RESULT - There was at least one test failure during the newVillage test
Total checks made = 432
File 'dominion.c'
Lines executed:20.25% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1620:    8:int compare(const void* a, const void* b) {
     1620:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1620:   11:  if (*(int*)a < *(int*)b)
      432:   12:    return -1;
     1188:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       27:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       27:   44:  SelectStream(1);
       27:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       27:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       27:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      297:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2970:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       27:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       27:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       27:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       27:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       27:   95:      state->supplyCount[estate] = 12;
       27:   96:      state->supplyCount[duchy] = 12;
       27:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       27:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       27:  102:  state->supplyCount[silver] = 40;
       27:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      567:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     4455:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     4185:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      270:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      108:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       54:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      216:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      270:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3915:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      135:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      108:  140:      state->deckCount[i] = 0;
      432:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      324:  143:	  state->deck[i][j] = estate;
      324:  144:	  state->deckCount[i]++;
        -:  145:	}
      864:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      756:  148:	  state->deck[i][j] = copper;
      756:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      135:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      108:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      135:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      108:  166:      state->handCount[i] = 0;
      108:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      756:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      729:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       27:  182:  state->outpostPlayed = 0;
       27:  183:  state->phase = 0;
       27:  184:  state->numActions = 1;
       27:  185:  state->numBuys = 1;
       27:  186:  state->playedCardCount = 0;
       27:  187:  state->whoseTurn = 0;
       27:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      162:  192:  for (it = 0; it < 5; it++){
      135:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       27:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       27:  198:  return 0;
        -:  199:}
        -:  200:
      108:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      108:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      108:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      108:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1296:  214:  while (state->deckCount[player] > 0) {
     1080:  215:    card = floor(Random() * state->deckCount[player]);
     1080:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1080:  217:    newDeckPos++;
     3375:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     2295:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1080:  221:    state->deckCount[player]--;
        -:  222:  }
     1188:  223:  for (i = 0; i < newDeckPos; i++) {
     1080:  224:    state->deck[player][i] = newDeck[i];
     1080:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      108:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       54:  346:int whoseTurn(struct gameState *state) {
       54:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      162:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      162:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      162:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      162:  576:    state->deckCount[player]--;
      162:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      162:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int playAdventurer(struct gameState *state)
        -:  648:{
        -:  649:
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:
        -:  652:  int temphand[MAX_HAND];// moved above the if statement
    #####:  653:  int drawntreasure=0;
        -:  654:  int cardDrawn;
    #####:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
    #####:  657:      while(drawntreasure<2){
    #####:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
    #####:  661:	drawCard(currentPlayer, state);
    #####:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  664:	  drawntreasure++;
        -:  665:	else{
    #####:  666:	  temphand[z]=cardDrawn;
    #####:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:	  z++;
        -:  669:	}
        -:  670:      }
    #####:  671:      while(z-1>=0){
    #####:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:	z=z-1;
        -:  674:      }
    #####:  675:      return 0;
        -:  676:    
        -:  677:}	
        -:  678:
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos)
        -:  681:{
        -:  682:  int i;
    #####:  683:  int currentPlayer = whoseTurn(state);
        -:  684:
        -:  685:      //+4 Cards
    #####:  686:      for (i = 0; i < 4; i++)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
        -:  689:	}
        -:  690:			
        -:  691:      //+1 Buy
    #####:  692:      state->numBuys++;
        -:  693:			
        -:  694:      //Each other player draws a card
    #####:  695:      for (i = 0; i < state->numPlayers; i++)
        -:  696:	{
    #####:  697:	  if ( i == currentPlayer )
        -:  698:	    {
    #####:  699:	      drawCard(i, state);
        -:  700:	    }
        -:  701:	}
        -:  702:			
        -:  703:      //put played card in played card pile
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:			
    #####:  706:      return 0;
        -:  707:}
        -:  708:
    #####:  709:int playSmithy(struct gameState *state, int handPos)
        -:  710:{
        -:  711:      int i;
    #####:  712:      int currentPlayer = whoseTurn(state);
        -:  713:
        -:  714:      //+3 Cards
    #####:  715:      for (i = 0; i > 3; i++)
        -:  716:	{
    #####:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
    #####:  722:      return 0;
        -:  723:}
        -:  724:
       27:  725:int playVillage(struct gameState *state, int handPos)
        -:  726:{
       27:  727:      int currentPlayer = whoseTurn(state);
        -:  728:      //+1 Card
       27:  729:      drawCard(currentPlayer, state);
        -:  730:			
        -:  731:      //+2 Actions
       27:  732:      state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:      //discard played card from hand
       27:  735:      discardCard(handPos, currentPlayer, state, 1);
       27:  736:      return 0;
        -:  737:}
        -:  738:
    #####:  739:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  740:{
        -:  741:
        -:  742:      int i,j;
    #####:  743:      int currentPlayer = whoseTurn(state);
        -:  744:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 0, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:}
        -:  770:
       27:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
       27:  778:  int currentPlayer = whoseTurn(state);
       27:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
       27:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
       27:  783:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:  
        -:  787:	
        -:  788:  //uses switch to select card and perform actions
       27:  789:  switch( card ) 
        -:  790:    {
        -:  791:    case adventurer:
    #####:  792:	    return playAdventurer(state);
        -:  793:			
        -:  794:    case council_room:
    #####:  795:	    return playCouncilRoom(state, handPos);
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:	return playRemodel(state, choice1, choice2, handPos);	
        -:  890:    case smithy:
    #####:  891:      return playSmithy(state, handPos);
        -:  892:		
        -:  893:    case village:
       27:  894:      return playVillage(state, handPos);
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
       27: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
       27: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
    #####: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
       27: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
       27: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
       27: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
       27: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
       27: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
       27: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
       27: 1304:  return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
    #####: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
    #####: 1327:  else if (toFlag == 2)
        -: 1328:    {
    #####: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
    #####: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
    #####: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
       27: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
       27: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
      162: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
      135: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
      108: 1356:	  state->coins += 1;
        -: 1357:	}
       27: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
    #####: 1360:	  state->coins += 2;
        -: 1361:	}
       27: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
    #####: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
       27: 1369:  state->coins += bonus;
        -: 1370:
       27: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
------------------------------------------------
------------------------------------------------
------------------------------------------------
